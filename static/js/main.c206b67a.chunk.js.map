{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Errorboundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["card","id","name","email","className","src","alt","Cardlist","robots","map","user","Card","key","Searchbox","searchValue","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","props","children","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","errorState","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","REQUEST_ROBOTS_FAILED","Boolean","window","location","hostname","match","searchState","requestRobotsState","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.c206b67a.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/card.css';\nimport 'tachyons';\n\n\nconst card = ({id, name, email}) => {\n    return (\n        <div className ='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"user\"/>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default card;","import React from 'react';\nimport Card from './Card'\n\n\nconst Cardlist = ({robots}) =>{\n    return (\n        <div className='tc'>\n           {\n               robots.map(user => {\n                   return (\n                       <Card key={user.id} id={user.id} name={user.name} email={user.email} />\n                   )\n               })\n           }\n        </div>\n    )\n};\nexport default Cardlist\n\n","import React from 'react';\n\n\nconst Searchbox = ({searchValue}) => {\n    return (\n        <div>\n            <input type='search' \n            placeholder='Search Robots' \n            className=\"pa3 ba b--green bg-lightest-blue\"\n            onChange = {searchValue}\n\n            />\n        </div>\n    )\n};\nexport default Searchbox;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(){\n        super()\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true})\n    }\n    render(){\n        if (this.state.hasError){ \n            return (\n            <div>\n                <h1>This doesn't look good.</h1>\n            </div>\n        )\n    };\n        return (\n            this.props.children\n        )\n    };\n\n\n};\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/App.css';\nimport 'tachyons';\nimport Cardlist from '../components/Cardlist';\nimport Searchbox from '../components/Searchbox';\nimport ErrorBoundary from '../components/Errorboundary';\n\nimport { setSearchField, requestRobots } from '../actions';\n\n\nconst mapStateToProps = (state) => {\n  return {\n     searchField: state.searchRobots.searchField,\n     robots: state.requestRobots.robots,\n     isPending: state.requestRobots.isPending,\n     errorState: state.requestRobots.errorState \n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\n\nclass App extends Component {\n\n  componentDidMount(){\n    this.props.onRequestRobots()\n  }\n \n\n  render() {\n    \n\n    const {searchField, onSearchChange, robots, isPending} = this.props\n    const filteredRobots = robots.filter( robot => {\n      return (robot.name.toLowerCase().includes(searchField.toLowerCase()))\n    })\n    if (isPending){\n      return (\n        <div>\n        <h1>\n          Loading...\n        </h1>\n        </div>\n      )\n    }\n    return (\n      <div className='tc app-body'>\n        <h1>RoboFriends</h1>\n        <Searchbox searchValue = {onSearchChange} />\n        <ErrorBoundary>\n        <Cardlist robots = {filteredRobots}/>\n        </ErrorBoundary>\n        \n        \n      </div>\n    )\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import \n{ \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: users}))\n    .catch(error => dispatch({REQUEST_ROBOTS_FAILED, payload: error}))\n\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUESTS_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'EQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \n{ \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n\n} from './constants';\nconst searchState = {\n    searchField: '',\n}\n\nexport const searchRobots = (state=searchState, action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n            \n        default:\n            return state\n    }\n}\n\nconst requestRobotsState = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = (state=requestRobotsState, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {errorState: action.payload, isPending: false})\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}