{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Errorboundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["card","id","name","email","className","src","alt","Cardlist","robots","map","user","Card","key","Searchbox","searchValue","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","props","children","Component","App","getSearchValue","event","val","target","value","searchField","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0RAeeA,G,iBAVF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAW,oDACZ,yBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,SACzD,4BAAKJ,GACL,2BAAIC,MCODI,EAbE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,yBAAKJ,UAAU,MAERI,EAAOC,KAAI,SAAAC,GACP,OACI,kBAACC,EAAD,CAAMC,IAAKF,EAAKT,GAAIA,GAAIS,EAAKT,GAAIC,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,aCKtEU,EAZG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAChB,OACI,6BACI,2BAAOC,KAAK,SACZC,YAAY,gBACZZ,UAAU,mCACVa,SAAYH,MCmBTI,E,kDAzBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAU,GAHL,E,8DAOKC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAIG,KAAKJ,MAAMC,SAEX,6BACI,wDAKJG,KAAKE,MAAMC,a,GApBKC,aCsDbC,E,kDA9Cb,aAAe,IAAD,8BACZ,gBAcFC,eAAiB,SAACC,GAChB,IAAMC,EAAMD,EAAME,OAAOC,MACzB,EAAKT,SAAS,CAACU,YAAaH,KAf5B,EAAKZ,MAAQ,CACXX,OAAQ,GACR0B,YAAa,IAJH,E,gEAQM,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKf,SAAS,CAAChB,OAAQ+B,S,+BAS/B,IAAD,EAEuBhB,KAAKJ,MAA5BX,EAFA,EAEAA,OAAQ0B,EAFR,EAEQA,YACTM,EAAiBhC,EAAOiC,QAAQ,SAAAC,GACpC,OAAQA,EAAMxC,KAAKyC,cAAcC,SAASV,EAAYS,kBAExD,OAAKnC,EAAOqC,OAMV,yBAAKzC,UAAU,eACb,2CACA,kBAAC,EAAD,CAAWU,YAAeS,KAAKM,iBAC/B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUrB,OAAUgC,MARpB,yBAAKpC,UAAU,6BAAf,kB,GA7BUuB,aCGEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,c","file":"static/js/main.f37e8f5e.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/card.css';\nimport 'tachyons';\n\n\nconst card = ({id, name, email}) => {\n    return (\n        <div className ='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"user\"/>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default card;","import React from 'react';\nimport Card from './Card'\n\n\nconst Cardlist = ({robots}) =>{\n    return (\n        <div className='tc'>\n           {\n               robots.map(user => {\n                   return (\n                       <Card key={user.id} id={user.id} name={user.name} email={user.email} />\n                   )\n               })\n           }\n        </div>\n    )\n};\nexport default Cardlist\n\n","import React from 'react';\n\n\nconst Searchbox = ({searchValue}) => {\n    return (\n        <div>\n            <input type='search' \n            placeholder='Search Robots' \n            className=\"pa3 ba b--green bg-lightest-blue\"\n            onChange = {searchValue}\n\n            />\n        </div>\n    )\n};\nexport default Searchbox;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(){\n        super()\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true})\n    }\n    render(){\n        if (this.state.hasError){ \n            return (\n            <div>\n                <h1>This doesn't look good.</h1>\n            </div>\n        )\n    };\n        return (\n            this.props.children\n        )\n    };\n\n\n};\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport '../styles/App.css';\nimport 'tachyons';\nimport Cardlist from '../components/Cardlist';\nimport Searchbox from '../components/Searchbox';\nimport ErrorBoundary from '../components/Errorboundary';\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots :[],\n      searchField: '',\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => {this.setState({robots: users})})\n\n  }\n\n  getSearchValue = (event) => {\n    const val = event.target.value\n    this.setState({searchField: val})\n  }\n\n  render() {\n    \n    const {robots, searchField} = this.state\n    const filteredRobots = robots.filter( robot => {\n      return (robot.name.toLowerCase().includes(searchField.toLowerCase()))\n    })\n    if (!robots.length){\n      return (\n        <div className=\"f-subheadline lh-title tc\">Loading...</div>\n      )\n    }\n    return (\n      <div className='tc app-body'>\n        <h1>RoboFriends</h1>\n        <Searchbox searchValue = {this.getSearchValue} />\n        <ErrorBoundary>\n        <Cardlist robots = {filteredRobots}/>\n        </ErrorBoundary>\n        \n        \n      </div>\n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}